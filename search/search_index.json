{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Constat Difficult\u00e9 \u00e0 capitaliser le travail du fait de la multiplicit\u00e9 des outils logiciels utilis\u00e9s. Objectifs Obtenir une version portable et polyvalente de VSCode. Mettre en place un environnement de d\u00e9veloppement avec msys2. Conventions op\u00e9ration propre au logiciel : raccourci, menu, etc nom particulier : de dossier, de fichier, de commande, etc vocabulaire : propre \u00e0 l'environnement","title":"Objectif"},{"location":"#constat","text":"Difficult\u00e9 \u00e0 capitaliser le travail du fait de la multiplicit\u00e9 des outils logiciels utilis\u00e9s.","title":"Constat"},{"location":"#objectifs","text":"Obtenir une version portable et polyvalente de VSCode. Mettre en place un environnement de d\u00e9veloppement avec msys2.","title":"Objectifs"},{"location":"#conventions","text":"op\u00e9ration propre au logiciel : raccourci, menu, etc nom particulier : de dossier, de fichier, de commande, etc vocabulaire : propre \u00e0 l'environnement","title":"Conventions"},{"location":"C%2B%2B/","text":"C/C++ Installation de l' extension C/C++ by Microsoft pour l'IntelliSense et le d\u00e9bogage. Cha\u00eene de compilation C/C++ dans msys2 : gcc, gdb, make : 105,64 MiB $ pacman -S --needed base-devel mingw-w64-ucrt-x86_64-toolchain $ pacman -Qee ... mingw-w64-ucrt-x86_64-gdb 15.2-1 mingw-w64-ucrt-x86_64-gdb-multiarch 15.2-1 mingw-w64-ucrt-x86_64-libmangle-git 12.0.0.r320.g335ffe5b7-1 mingw-w64-ucrt-x86_64-make 4.4.1-3 mingw-w64-ucrt-x86_64-pkgconf 1~2.3.0-1 mingw-w64-ucrt-x86_64-tools-git 12.0.0.r320.g335ffe5b7-1 mingw-w64-ucrt-x86_64-winstorecompat-git 12.0.0.r320.g335ffe5b7-1 msys2-runtime 3.5.4-2 ... V\u00e9rifier dans le terminal de VSCode que les commandes gcc , g++ , gdb et mingw32-make fonctionnent : $ gcc --version $ g++ --version $ gdb --version $ mingw32-make --version D\u00e9sormais tout fichier C/C++ peut \u00eatre compil\u00e9 et ex\u00e9cut\u00e9 via le menu en haut \u00e0 droite. Possibilit\u00e9 \u00e9galement via les raccourcis de VSCode : Configure tasks... -> C/C++:g++.exe build active file qui cr\u00e9e un fichier tasks.json : { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"cppbuild\", \"label\": \"C/C++: g++.exe build active file\", \"command\": \"D:\\\\PortableApps\\\\VSCodeEveryWhere\\\\App\\\\msys64\\\\ucrt64\\\\bin\\\\g++.exe\", \"args\": [ \"-fdiagnostics-color=always\", \"-g\", \"${file}\", \"-o\", \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" ], \"options\": { \"cwd\": \"${fileDirname}\" }, \"problemMatcher\": [ \"$gcc\" ], \"group\": \"build\", \"detail\": \"compiler: D:\\\\PortableApps\\\\VSCodeEveryWhere\\\\App\\\\msys64\\\\ucrt64\\\\bin\\\\g++.exe\" } ] } Pour compiler : ctrl + shift + B -> C/C++:g++.exe build active file Pour ex\u00e9cuter : ctrl + F5 -> C/C++:g++.exe build and debug active file Pour d\u00e9boguer apr\u00e8s avoir plac\u00e9 un point d'arr\u00eat : F5 -> C/C++:g++.exe build and debug active file Tuto gcc pour VSCode : Using GCC with MinGW vscode_workspace \u2502 \u251c\u2500\u2500 c++_simple","title":"C/C++"},{"location":"C%2B%2B/#cc","text":"Installation de l' extension C/C++ by Microsoft pour l'IntelliSense et le d\u00e9bogage. Cha\u00eene de compilation C/C++ dans msys2 : gcc, gdb, make : 105,64 MiB $ pacman -S --needed base-devel mingw-w64-ucrt-x86_64-toolchain $ pacman -Qee ... mingw-w64-ucrt-x86_64-gdb 15.2-1 mingw-w64-ucrt-x86_64-gdb-multiarch 15.2-1 mingw-w64-ucrt-x86_64-libmangle-git 12.0.0.r320.g335ffe5b7-1 mingw-w64-ucrt-x86_64-make 4.4.1-3 mingw-w64-ucrt-x86_64-pkgconf 1~2.3.0-1 mingw-w64-ucrt-x86_64-tools-git 12.0.0.r320.g335ffe5b7-1 mingw-w64-ucrt-x86_64-winstorecompat-git 12.0.0.r320.g335ffe5b7-1 msys2-runtime 3.5.4-2 ... V\u00e9rifier dans le terminal de VSCode que les commandes gcc , g++ , gdb et mingw32-make fonctionnent : $ gcc --version $ g++ --version $ gdb --version $ mingw32-make --version D\u00e9sormais tout fichier C/C++ peut \u00eatre compil\u00e9 et ex\u00e9cut\u00e9 via le menu en haut \u00e0 droite. Possibilit\u00e9 \u00e9galement via les raccourcis de VSCode : Configure tasks... -> C/C++:g++.exe build active file qui cr\u00e9e un fichier tasks.json : { \"version\": \"2.0.0\", \"tasks\": [ { \"type\": \"cppbuild\", \"label\": \"C/C++: g++.exe build active file\", \"command\": \"D:\\\\PortableApps\\\\VSCodeEveryWhere\\\\App\\\\msys64\\\\ucrt64\\\\bin\\\\g++.exe\", \"args\": [ \"-fdiagnostics-color=always\", \"-g\", \"${file}\", \"-o\", \"${fileDirname}\\\\${fileBasenameNoExtension}.exe\" ], \"options\": { \"cwd\": \"${fileDirname}\" }, \"problemMatcher\": [ \"$gcc\" ], \"group\": \"build\", \"detail\": \"compiler: D:\\\\PortableApps\\\\VSCodeEveryWhere\\\\App\\\\msys64\\\\ucrt64\\\\bin\\\\g++.exe\" } ] } Pour compiler : ctrl + shift + B -> C/C++:g++.exe build active file Pour ex\u00e9cuter : ctrl + F5 -> C/C++:g++.exe build and debug active file Pour d\u00e9boguer apr\u00e8s avoir plac\u00e9 un point d'arr\u00eat : F5 -> C/C++:g++.exe build and debug active file Tuto gcc pour VSCode : Using GCC with MinGW vscode_workspace \u2502 \u251c\u2500\u2500 c++_simple","title":"C/C++"},{"location":"git/","text":"Installation de la version portable pour Windows Lien : git Copie de la version portable dans le r\u00e9pertoire App de VSCodeEveryWhere : \u251c\u2500\u2500 App \u2502 \u251c\u2500\u2500 AppInfo \u2502 \u251c\u2500\u2500 FirstRun \u2502 \u251c\u2500\u2500 msys64 \u2502 \u251c\u2500\u2500 PortableGit \u2502 \u2514\u2500\u2500 VSCode Int\u00e9gration de Git \u00e0 VSCode Modification du fichier VSCodePortable.ini pour actualiser le chemin git : GIT=%PAL:AppDir%\\PortableGit Red\u00e9marrage de VSCodeEveryWhere : la commande git est disponible dans le terminal pwsh ou cmd . Int\u00e9gration du terminal Mintty de msys2 dans VSCode ctrl + shift + P -> User settings (JSON) Ajouter dans le fichier settings.json les lignes suivantes : { \"terminal.integrated.profiles.windows\": { \"GIT PORTABLE\": { \"path\": \"cmd.exe\", \"args\": [ \"/c\", \"D:\\\\PortableApps\\\\VSCodeEveryWhere\\\\App\\\\PortableGit\\\\git-bash.exe\" ] } } Le terminal git s'ouvre dans une nouvelle fen\u00eatre. En ligne de commande : - on v\u00e9rifie le chemin du r\u00e9pertoire home dans la console git ; - on configure le nom et le mail ; - le fichier .gitconfig est cr\u00e9\u00e9 dans le r\u00e9pertoire home $ echo $HOME /d/PortableApps/VSCodeEveryWhere/Data/misc/Git/home $ git config --global user.name \"user_name\" $ git config --global user.email \"user_email\" $ git config --list --global $ cd ~ $ ls -la total 10 drwxr-xr-x 1 ardui 197609 0 Oct 9 22:39 ./ drwxr-xr-x 1 ardui 197609 0 Oct 9 20:47 ../ -rw-r--r-- 1 ardui 197609 164 Oct 9 22:35 .bash_history -rw-r--r-- 1 ardui 197609 99 Oct 9 21:20 .bash_profile -rw-r--r-- 1 ardui 197609 137 Oct 22 2023 .bashrc -rw-r--r-- 1 ardui 197609 56 Oct 9 22:37 .gitconfig -rw-r--r-- 1 ardui 197609 20 Oct 9 22:39 .lesshst -rw-r--r-- 1 ardui 197609 137 Oct 22 2023 .zshrc Authentification # configuration par d\u00e9faut (<no helper> coch\u00e9 et fen\u00eatre du gestionnaire \u00e0 chaquer connexion) $ git config --list --global ... credential.helperselector.selected=<no helper> ... $ git config --list --system ... credential.helper=helper-selector ... # exemple pour se connecter au d\u00e9p\u00f4t distant lm35 : $ git remote add https://github.com/tln-lyc-rouv-bts-ciel/digital_thermometer_lm35 Le gestionnaire d'authentification git appara\u00eet : Apr\u00e8s avoir cliqu\u00e9 sur \"seclect\" dans le gestionnaire : Apr\u00e8s avoir recliqu\u00e9 sur \"seclect\" dans le gestionnaire, vscode m\u00e9morise l'acc\u00e8s au compte github : Trois types d'identification (voir le \"Gestionnaire d'identification\" Windows 11 pour les cl\u00e9s cr\u00e9\u00e9es): - <no helper> ne cr\u00e9e pas de cl\u00e9 - wincred cr\u00e9e une cl\u00e9 (git:https://109131905@github.com) - manager cr\u00e9e une cl\u00e9 (git:https://github.com) VSCode se connectera alors automatiquement au compte github associ\u00e9. # pour voir l'identifiant \u00e9ventuellement cr\u00e9\u00e9 (si cl\u00e9 wincred ou manager) $ git credential-manager github list # pour retirer une valeur mutliple dans la configuration de git $ git config --unset-all <value> # Pour ne plus avoir la fen\u00eatre du gestionnaire d'identification de git cocher la case \"Always use this from now on\" dans le gestioonnaire et s\u00e9lectionner une option. $ git config --list --global ... # si <no helper> s\u00e9lectionn\u00e9 : credential.helperselector.selected=<no helper> # si wincred s\u00e9lectionn\u00e9 credential.helperselector.selected=wincred ... $ git config --list --system ... # si <no helper> s\u00e9lectionn\u00e9 : credential.helper= # si wincred s\u00e9lectionn\u00e9 credential.helper=!\"D:/PortableApps/VSCodeEveryWhere/App/PortableGit/mingw64/libexec/git-core/git-credential-wincred.exe\" ... # si d\u00e9connexion du compte github dans vscode, pour faire r\u00e9appara\u00eetre le gestionnaire : $ git config --system credential.helper helper-selector","title":"Git"},{"location":"git/#installation-de-la-version-portable-pour-windows","text":"Lien : git Copie de la version portable dans le r\u00e9pertoire App de VSCodeEveryWhere : \u251c\u2500\u2500 App \u2502 \u251c\u2500\u2500 AppInfo \u2502 \u251c\u2500\u2500 FirstRun \u2502 \u251c\u2500\u2500 msys64 \u2502 \u251c\u2500\u2500 PortableGit \u2502 \u2514\u2500\u2500 VSCode","title":"Installation de la version portable pour Windows"},{"location":"git/#integration-de-git-a-vscode","text":"Modification du fichier VSCodePortable.ini pour actualiser le chemin git : GIT=%PAL:AppDir%\\PortableGit Red\u00e9marrage de VSCodeEveryWhere : la commande git est disponible dans le terminal pwsh ou cmd .","title":"Int\u00e9gration de Git \u00e0 VSCode"},{"location":"git/#integration-du-terminal-mintty-de-msys2-dans-vscode","text":"ctrl + shift + P -> User settings (JSON) Ajouter dans le fichier settings.json les lignes suivantes : { \"terminal.integrated.profiles.windows\": { \"GIT PORTABLE\": { \"path\": \"cmd.exe\", \"args\": [ \"/c\", \"D:\\\\PortableApps\\\\VSCodeEveryWhere\\\\App\\\\PortableGit\\\\git-bash.exe\" ] } } Le terminal git s'ouvre dans une nouvelle fen\u00eatre. En ligne de commande : - on v\u00e9rifie le chemin du r\u00e9pertoire home dans la console git ; - on configure le nom et le mail ; - le fichier .gitconfig est cr\u00e9\u00e9 dans le r\u00e9pertoire home $ echo $HOME /d/PortableApps/VSCodeEveryWhere/Data/misc/Git/home $ git config --global user.name \"user_name\" $ git config --global user.email \"user_email\" $ git config --list --global $ cd ~ $ ls -la total 10 drwxr-xr-x 1 ardui 197609 0 Oct 9 22:39 ./ drwxr-xr-x 1 ardui 197609 0 Oct 9 20:47 ../ -rw-r--r-- 1 ardui 197609 164 Oct 9 22:35 .bash_history -rw-r--r-- 1 ardui 197609 99 Oct 9 21:20 .bash_profile -rw-r--r-- 1 ardui 197609 137 Oct 22 2023 .bashrc -rw-r--r-- 1 ardui 197609 56 Oct 9 22:37 .gitconfig -rw-r--r-- 1 ardui 197609 20 Oct 9 22:39 .lesshst -rw-r--r-- 1 ardui 197609 137 Oct 22 2023 .zshrc","title":"Int\u00e9gration du terminal Mintty de msys2 dans VSCode"},{"location":"git/#authentification","text":"# configuration par d\u00e9faut (<no helper> coch\u00e9 et fen\u00eatre du gestionnaire \u00e0 chaquer connexion) $ git config --list --global ... credential.helperselector.selected=<no helper> ... $ git config --list --system ... credential.helper=helper-selector ... # exemple pour se connecter au d\u00e9p\u00f4t distant lm35 : $ git remote add https://github.com/tln-lyc-rouv-bts-ciel/digital_thermometer_lm35 Le gestionnaire d'authentification git appara\u00eet : Apr\u00e8s avoir cliqu\u00e9 sur \"seclect\" dans le gestionnaire : Apr\u00e8s avoir recliqu\u00e9 sur \"seclect\" dans le gestionnaire, vscode m\u00e9morise l'acc\u00e8s au compte github : Trois types d'identification (voir le \"Gestionnaire d'identification\" Windows 11 pour les cl\u00e9s cr\u00e9\u00e9es): - <no helper> ne cr\u00e9e pas de cl\u00e9 - wincred cr\u00e9e une cl\u00e9 (git:https://109131905@github.com) - manager cr\u00e9e une cl\u00e9 (git:https://github.com) VSCode se connectera alors automatiquement au compte github associ\u00e9. # pour voir l'identifiant \u00e9ventuellement cr\u00e9\u00e9 (si cl\u00e9 wincred ou manager) $ git credential-manager github list # pour retirer une valeur mutliple dans la configuration de git $ git config --unset-all <value> # Pour ne plus avoir la fen\u00eatre du gestionnaire d'identification de git cocher la case \"Always use this from now on\" dans le gestioonnaire et s\u00e9lectionner une option. $ git config --list --global ... # si <no helper> s\u00e9lectionn\u00e9 : credential.helperselector.selected=<no helper> # si wincred s\u00e9lectionn\u00e9 credential.helperselector.selected=wincred ... $ git config --list --system ... # si <no helper> s\u00e9lectionn\u00e9 : credential.helper= # si wincred s\u00e9lectionn\u00e9 credential.helper=!\"D:/PortableApps/VSCodeEveryWhere/App/PortableGit/mingw64/libexec/git-core/git-credential-wincred.exe\" ... # si d\u00e9connexion du compte github dans vscode, pour faire r\u00e9appara\u00eetre le gestionnaire : $ git config --system credential.helper helper-selector","title":"Authentification"},{"location":"installation/","text":"VSCode T\u00e9l\u00e9chargement d'une version portable : VSCode Cr\u00e9ation du dossier downloads pour conservatoin des fichiers t\u00e9l\u00e9charg\u00e9s : VSCodeEveryWhere \u2502 \u251c\u2500\u2500 App \u2502 \u251c\u2500\u2500 Data \u2502 \u251c\u2500\u2500 desktop.ini \u2502 \u251c\u2500\u2500 downloads \u2502 \u251c\u2500\u2500 Help.html \u2502 \u251c\u2500\u2500 Other \u2502 \u251c\u2500\u2500 VSCodePortable - original.ini \u2502 \u251c\u2500\u2500 VSCodePortable.exe \u2502 \u2514\u2500\u2500 VSCodePortable.ini Dans VSCode : ctrl + shift + P -> Preferences: Open User Settings (JSON) Valeurs initiales du fichier : { \"update.mode\": \"none\", \"telemetry.telemetryLevel\": \"off\", \"extensions.autoUpdate\": false, \"extensions.ignoreRecommendations\": true, \"workbench.enableExperiments\": false, \"workbench.settings.enableNaturalLanguageSearch\": false, \"editor.bracketPairColorization.enabled\": true, \"editor.minimap.renderCharacters\": false, \"workbench.colorTheme\": \"Monokai\" } Msys2 T\u00e9l\u00e9chargement : msys2 Copie du dossier msys64 apr\u00e8s d\u00e9compression du fichier d'archive dans le r\u00e9pertoire App de VSCodeEveryWhere . Installation et mise \u00e0 jour : msys2 Paquets initialement install\u00e9s : $ pacman -Qee base 2022.06-1 filesystem 2023.02.07-2 <!-- @import \"[TOC]\" {cmd=\"toc\" depthFrom=1 depthTo=6 orderedList=false} --> msys2-runtime 3.5.4-2 Choix de l'environnement ucrt64 : msys2 Installation des paquets pour g\u00e9n\u00e9rer cette documentation ( python , pip et mkdocs ), dans la console ucrt64 : gcc : 505,57 MiB python : 345,15 MiB tree : pour g\u00e9n\u00e9rer les arborescence des dossiers et fichiers $ pacman -S mingw-w64-ucrt-x86_64-gcc $ pacman -S mingw-w64-ucrt-x86_64-python-pip $ pacman -S tree $ pacman -Qee ... mingw-w64-ucrt-x86_64-gcc 14.2.0-1 mingw-w64-ucrt-x86_64-python-pip 24.1.2-2 tree 2.1.3-1 ... $ pip install mkdocs Int\u00e9gration de Msys2 \u00e0 VSCode Modification du fichier VSCodePortable.ini pour actualiser le chemin python et mkdocs : MINGW=%PAL:AppDir%\\msys64\\ucrt64 V\u00e9rifier dans le terminal de VSCode que les commandes python et mkdocs fonctionnent : $ python --version $ mkdocs --version Int\u00e9gration du terminal Mintty de msys2 dans VSCode : ctrl + shift + P -> User settings (JSON) Ajouter dans le fichier settings.json les lignes suivantes : { \"terminal.integrated.profiles.windows\": { \"MSYS2 UCRT\": { \"path\": \"cmd.exe\", \"args\": [ \"/c\", \"D:\\\\PortableApps\\\\VSCodeEveryWhere\\\\App\\\\msys64\\\\msys2_shell.cmd -defterm -here -no-start -ucrt64\" ] } } } Le terminal Mintty est ajout\u00e9 \u00e0 la liste des diff\u00e9rents terminaux. Mkdocs Documentation : mkdocs Installation de l' extension Live Server by Ritwick Dey pour visualiser le rendu final de la documentation au format html. Navigateur par d\u00e9faut pour Live Server : ctrl + shift + P -> User settings (JSON) Ajouter dans le fichier settings.json les lignes suivantes : { \"liveServer.settings.AdvanceCustomBrowserCmdLine\": \"D:\\\\PortableApps\\\\GoogleChromePortable64\\\\GoogleChromePortable.exe\" }","title":"Installation"},{"location":"installation/#vscode","text":"T\u00e9l\u00e9chargement d'une version portable : VSCode Cr\u00e9ation du dossier downloads pour conservatoin des fichiers t\u00e9l\u00e9charg\u00e9s : VSCodeEveryWhere \u2502 \u251c\u2500\u2500 App \u2502 \u251c\u2500\u2500 Data \u2502 \u251c\u2500\u2500 desktop.ini \u2502 \u251c\u2500\u2500 downloads \u2502 \u251c\u2500\u2500 Help.html \u2502 \u251c\u2500\u2500 Other \u2502 \u251c\u2500\u2500 VSCodePortable - original.ini \u2502 \u251c\u2500\u2500 VSCodePortable.exe \u2502 \u2514\u2500\u2500 VSCodePortable.ini Dans VSCode : ctrl + shift + P -> Preferences: Open User Settings (JSON) Valeurs initiales du fichier : { \"update.mode\": \"none\", \"telemetry.telemetryLevel\": \"off\", \"extensions.autoUpdate\": false, \"extensions.ignoreRecommendations\": true, \"workbench.enableExperiments\": false, \"workbench.settings.enableNaturalLanguageSearch\": false, \"editor.bracketPairColorization.enabled\": true, \"editor.minimap.renderCharacters\": false, \"workbench.colorTheme\": \"Monokai\" }","title":"VSCode"},{"location":"installation/#msys2","text":"T\u00e9l\u00e9chargement : msys2 Copie du dossier msys64 apr\u00e8s d\u00e9compression du fichier d'archive dans le r\u00e9pertoire App de VSCodeEveryWhere . Installation et mise \u00e0 jour : msys2 Paquets initialement install\u00e9s : $ pacman -Qee base 2022.06-1 filesystem 2023.02.07-2 <!-- @import \"[TOC]\" {cmd=\"toc\" depthFrom=1 depthTo=6 orderedList=false} --> msys2-runtime 3.5.4-2 Choix de l'environnement ucrt64 : msys2 Installation des paquets pour g\u00e9n\u00e9rer cette documentation ( python , pip et mkdocs ), dans la console ucrt64 : gcc : 505,57 MiB python : 345,15 MiB tree : pour g\u00e9n\u00e9rer les arborescence des dossiers et fichiers $ pacman -S mingw-w64-ucrt-x86_64-gcc $ pacman -S mingw-w64-ucrt-x86_64-python-pip $ pacman -S tree $ pacman -Qee ... mingw-w64-ucrt-x86_64-gcc 14.2.0-1 mingw-w64-ucrt-x86_64-python-pip 24.1.2-2 tree 2.1.3-1 ... $ pip install mkdocs","title":"Msys2"},{"location":"installation/#integration-de-msys2-a-vscode","text":"Modification du fichier VSCodePortable.ini pour actualiser le chemin python et mkdocs : MINGW=%PAL:AppDir%\\msys64\\ucrt64 V\u00e9rifier dans le terminal de VSCode que les commandes python et mkdocs fonctionnent : $ python --version $ mkdocs --version Int\u00e9gration du terminal Mintty de msys2 dans VSCode : ctrl + shift + P -> User settings (JSON) Ajouter dans le fichier settings.json les lignes suivantes : { \"terminal.integrated.profiles.windows\": { \"MSYS2 UCRT\": { \"path\": \"cmd.exe\", \"args\": [ \"/c\", \"D:\\\\PortableApps\\\\VSCodeEveryWhere\\\\App\\\\msys64\\\\msys2_shell.cmd -defterm -here -no-start -ucrt64\" ] } } } Le terminal Mintty est ajout\u00e9 \u00e0 la liste des diff\u00e9rents terminaux.","title":"Int\u00e9gration de Msys2 \u00e0 VSCode"},{"location":"installation/#mkdocs","text":"Documentation : mkdocs Installation de l' extension Live Server by Ritwick Dey pour visualiser le rendu final de la documentation au format html. Navigateur par d\u00e9faut pour Live Server : ctrl + shift + P -> User settings (JSON) Ajouter dans le fichier settings.json les lignes suivantes : { \"liveServer.settings.AdvanceCustomBrowserCmdLine\": \"D:\\\\PortableApps\\\\GoogleChromePortable64\\\\GoogleChromePortable.exe\" }","title":"Mkdocs"},{"location":"nodejs/","text":"Dans msys2 Installation du paquet : nodejs : 203,11 MiB $ pacman -S mingw-w64-ucrt-x86_64-nodejs V\u00e9rifier le REPL ( R ead E valuate P rint and L oop) nodejs : $ node Welcome to Node.js v22.9.0. Type \".help\" for more information. > > .exit Pour l'autocompl\u00e9tion $ node install @types/node Espace de travail vscode_workspace \u2502 \u251c\u2500\u2500 nodejs","title":"NodeJs"},{"location":"nodejs/#dans-msys2","text":"Installation du paquet : nodejs : 203,11 MiB $ pacman -S mingw-w64-ucrt-x86_64-nodejs V\u00e9rifier le REPL ( R ead E valuate P rint and L oop) nodejs : $ node Welcome to Node.js v22.9.0. Type \".help\" for more information. > > .exit Pour l'autocompl\u00e9tion $ node install @types/node","title":"Dans msys2"},{"location":"nodejs/#espace-de-travail","text":"vscode_workspace \u2502 \u251c\u2500\u2500 nodejs","title":"Espace de travail"},{"location":"nodered/","text":"Installation d'une version portable Lien de t\u00e9l\u00e9chargement : nodeJs Choisir Windows Binary (.zip) Mettre le fichier launch node red dans le r\u00e9pertoire d'installation pour pouvoir utiliser nodeJS en ligne de commande. \u00c0 partir du terminal installer nodered en ligne de commande : $ npm install -g --unsafe-perm node-red Il n'est pas n\u00e9cessaire d'autoriser le pare-feu. Mettre le fichier launch node red dans le r\u00e9pertoire d'installation. Apr\u00e8s ex\u00e9cution du fichier : cr\u00e9ation du r\u00e9pertoire utilisateur (.node-red) dans le r\u00e9pertoire d'installation de nodeJS. Voir lien suivant pour les options et arguments de node-red Running Node-RED locally . Espace de travail vscode_workspace \u2502 \u251c\u2500\u2500 web_dev_with_node_red Red\u00e9ploiement d'une version portable avec des modules d\u00e9j\u00e0 install\u00e9 (suppression des flots et des r\u00e9glages) Supprimer tous les fichiers du dossier .node except\u00e9 le fichier package.json, Node-RED recr\u00e9era les fichiers \u00e0 son lancement.","title":"NodeRed"},{"location":"nodered/#installation-dune-version-portable","text":"Lien de t\u00e9l\u00e9chargement : nodeJs Choisir Windows Binary (.zip) Mettre le fichier launch node red dans le r\u00e9pertoire d'installation pour pouvoir utiliser nodeJS en ligne de commande. \u00c0 partir du terminal installer nodered en ligne de commande : $ npm install -g --unsafe-perm node-red Il n'est pas n\u00e9cessaire d'autoriser le pare-feu. Mettre le fichier launch node red dans le r\u00e9pertoire d'installation. Apr\u00e8s ex\u00e9cution du fichier : cr\u00e9ation du r\u00e9pertoire utilisateur (.node-red) dans le r\u00e9pertoire d'installation de nodeJS. Voir lien suivant pour les options et arguments de node-red Running Node-RED locally .","title":"Installation d'une version portable"},{"location":"nodered/#espace-de-travail","text":"vscode_workspace \u2502 \u251c\u2500\u2500 web_dev_with_node_red","title":"Espace de travail"},{"location":"nodered/#redeploiement-dune-version-portable-avec-des-modules-deja-installe-suppression-des-flots-et-des-reglages","text":"Supprimer tous les fichiers du dossier .node except\u00e9 le fichier package.json, Node-RED recr\u00e9era les fichiers \u00e0 son lancement.","title":"Red\u00e9ploiement d'une version portable avec des modules d\u00e9j\u00e0 install\u00e9 (suppression des flots et des r\u00e9glages)"},{"location":"php/","text":"Suite UwAmp (Windows Apache MySql Php) Lien de t\u00e9l\u00e9chargement : UwAmp Version portable d\u00e9zipp\u00e9e dans : VSCodeEveryWhere \u2502 \u251c\u2500\u2500 app Espace de travail VSCodeEveryWhere \u251c\u2500\u2500\u2500App \u2502 \u251c\u2500\u2500\u2500UwAmp \u2502 \u2502 \u251c\u2500\u2500\u2500www \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500php Int\u00e9gration du gestionnaire UwAmp dans VSCode ctrl + shift + P -> User settings (JSON) Ajouter dans le fichier settings.json les lignes suivantes : { \"terminal.integrated.profiles.windows\": { \"UwAmp\": { \"path\": \"cmd.exe\", \"args\": [ \"/c\", \"D:\\\\PortableApps\\\\VSCodeEveryWhere\\\\App\\\\UwAmp\\\\UwAmp.exe\" ] } } Ajout du chemin du processeur php pour l'analyse de scripts ctrl + shift + P -> User settings (JSON) Ajouter dans le fichier settings.json la ligne suivante : { \"php.validate.executablePath\": \"D:\\\\PortableApps\\\\VSCodeEveryWhere\\\\App\\\\UwAmp\\\\bin\\\\php\\\\php-5.5.15\\\\php.exe\" } Ajout de php.exe et mysqlq.exe \u00e0 la variable PATH de VSCodeEveryWhere ; Override Windows \"PATH\" PATH=%PAL:AppDir%\\UwAmp\\bin\\php\\php-5.5.15;%PAL:AppDir%\\UwAmp\\bin\\database\\mysql-5.6.20\\bin;%PATH%","title":"PHP"},{"location":"php/#suite-uwamp-windows-apache-mysql-php","text":"Lien de t\u00e9l\u00e9chargement : UwAmp Version portable d\u00e9zipp\u00e9e dans : VSCodeEveryWhere \u2502 \u251c\u2500\u2500 app","title":"Suite UwAmp (Windows Apache MySql Php)"},{"location":"php/#espace-de-travail","text":"VSCodeEveryWhere \u251c\u2500\u2500\u2500App \u2502 \u251c\u2500\u2500\u2500UwAmp \u2502 \u2502 \u251c\u2500\u2500\u2500www \u2502 \u2502 \u2502 \u2514\u2500\u2500\u2500php","title":"Espace de travail"},{"location":"php/#integration-du-gestionnaire-uwamp-dans-vscode","text":"ctrl + shift + P -> User settings (JSON) Ajouter dans le fichier settings.json les lignes suivantes : { \"terminal.integrated.profiles.windows\": { \"UwAmp\": { \"path\": \"cmd.exe\", \"args\": [ \"/c\", \"D:\\\\PortableApps\\\\VSCodeEveryWhere\\\\App\\\\UwAmp\\\\UwAmp.exe\" ] } }","title":"Int\u00e9gration du gestionnaire UwAmp dans VSCode"},{"location":"php/#ajout-du-chemin-du-processeur-php-pour-lanalyse-de-scripts","text":"ctrl + shift + P -> User settings (JSON) Ajouter dans le fichier settings.json la ligne suivante : { \"php.validate.executablePath\": \"D:\\\\PortableApps\\\\VSCodeEveryWhere\\\\App\\\\UwAmp\\\\bin\\\\php\\\\php-5.5.15\\\\php.exe\" }","title":"Ajout du chemin du processeur php pour l'analyse de scripts"},{"location":"php/#ajout-de-phpexe-et-mysqlqexe-a-la-variable-path-de-vscodeeverywhere","text":"; Override Windows \"PATH\" PATH=%PAL:AppDir%\\UwAmp\\bin\\php\\php-5.5.15;%PAL:AppDir%\\UwAmp\\bin\\database\\mysql-5.6.20\\bin;%PATH%","title":"Ajout de php.exe et mysqlq.exe \u00e0 la variable PATH de VSCodeEveryWhere"},{"location":"webdev/","text":"Extensions HTTP Client by Marcel J. Kloubert Markdonw Preview Enhanced by Yiyi Wang Image by Nerds Inc. HTML boilerplate by Vaisrav PHP by DEVSENSE Liver Server by Ritwick Dey","title":"Extensions"},{"location":"webdev/#extensions","text":"HTTP Client by Marcel J. Kloubert Markdonw Preview Enhanced by Yiyi Wang Image by Nerds Inc. HTML boilerplate by Vaisrav PHP by DEVSENSE Liver Server by Ritwick Dey","title":"Extensions"}]}